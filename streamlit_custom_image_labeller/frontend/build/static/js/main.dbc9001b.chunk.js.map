{"version":3,"sources":["CustomImageLabeller.tsx","index.tsx"],"names":["withStreamlitConnection","props","pointColor","args","canvasWidth","canvasHeight","imageData","canvasRef","useRef","useState","x","point","y","setPoint","image","useEffect","context","current","getContext","idata","createImageData","data","set","putImageData","fillStyle","fillRect","Streamlit","setFrameHeight","ref","onClick","e","clientX","clientY","setComponentValue","handleCanvasClick","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPA2DeA,eAtCa,SAACC,GACzB,IAAMC,EAAaD,EAAME,KAAKD,WAC9B,EAA6DD,EAAME,KAA3DC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,aAAcC,EAAnC,EAAmCA,UAG7BC,EAAYC,iBAA0B,MAC5C,EAA0BC,mBAAqB,CAACC,EAAET,EAAME,KAAKQ,MAAMD,EAAGE,EAAEX,EAAME,KAAKQ,MAAMC,IAAzF,mBAAOD,EAAP,KAAcE,EAAd,KACA,EAA0BJ,mBAA4BH,GAAtD,mBAAOQ,EAAP,UAmBA,OAZAC,qBAAU,WACN,IACMC,EADYT,EAAUU,QACDC,WAAW,MAChCC,EAAQH,EAASI,gBAAgBhB,EAAaC,GACpDc,EAAME,KAAKC,IAAIR,GACfE,EAASO,aAAaJ,EAAO,EAAG,GAChCH,EAASQ,UAAYtB,EACrBc,EAASS,SAASd,EAAMD,EAAGC,EAAMC,EAAG,EAAG,GAEvCc,IAAUC,mBACX,CAAChB,EAAOG,IAGP,6BACI,4BACIc,IAAKrB,EACLsB,QAAS,SAACC,IArBI,SAACA,GACvBjB,EAAS,2BAAIF,GAAL,IAAYD,EAAEoB,EAAEC,QAASnB,EAAEkB,EAAEE,WACrCN,IAAUO,kBAAkB,CAACvB,EAAEC,EAAMD,EAAGE,EAAED,EAAMC,IAmBzBsB,CAAkBJ,IACjCK,MAAS/B,EACTgC,OAAU/B,QCjD1BgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.dbc9001b.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef} from \"react\"\nimport {\n    ComponentProps,\n    Streamlit,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\n// import { fabric } from \"fabric\"\n\ninterface PointProps {\n    x:number\n    y:number\n}\n\ninterface PythonArgs {\n    canvasWidth: number\n    canvasHeight: number\n    point: PointProps\n    pointColor: string\n    imageData: Uint8ClampedArray\n}\n\nconst CustomImageLabeller = (props: ComponentProps) => {\n    const pointColor = props.args.pointColor\n    const { canvasWidth, canvasHeight, imageData }: PythonArgs = props.args\n\n    \n    const canvasRef = useRef<HTMLCanvasElement>(null)\n    const [point, setPoint] = useState<PointProps>({x:props.args.point.x, y:props.args.point.y})\n    const [image, setImage] = useState<Uint8ClampedArray>(imageData)\n\n    const handleCanvasClick = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) =>{\n        setPoint({...point, x:e.clientX, y:e.clientY})\n        Streamlit.setComponentValue({x:point.x, y:point.y});\n    }\n\n    useEffect(() => {\n        const canvasObj = canvasRef.current;\n        const context = canvasObj!.getContext(\"2d\");\n        const idata = context!.createImageData(canvasWidth, canvasHeight)\n        idata.data.set(image)\n        context!.putImageData(idata, 0, 0)\n        context!.fillStyle = pointColor;\n        context!.fillRect(point.x, point.y, 3, 3)\n        \n        Streamlit.setFrameHeight()\n    }, [point, image])\n    \n    return (\n        <div>\n            <canvas\n                ref={canvasRef}\n                onClick={(e)=>{handleCanvasClick(e)}}\n                width = {canvasWidth}\n                height = {canvasHeight}\n            />\n        </div>\n    )\n}\n\nexport default withStreamlitConnection(CustomImageLabeller)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CustomImageLabeller from \"./CustomImageLabeller\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CustomImageLabeller/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}